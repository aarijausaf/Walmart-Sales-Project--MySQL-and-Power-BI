CREATE DATABASE IF NOT EXISTS  WalmartSalesData;

USE WalmartSalesData;

CREATE TABLE IF NOT EXISTS sales(
	invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
    branch VARCHAR(5) NOT NULL,
    city VARCHAR(30) NOT NULL,
    customer_type VARCHAR(30) NOT NULL,
    gender VARCHAR(30) NOT NULL,
    product_line VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL,
    tax_pct FLOAT(6,4) NOT NULL,
    total DECIMAL(12, 4) NOT NULL,
    date DATETIME NOT NULL,
    time TIME NOT NULL,
    payment VARCHAR(15) NOT NULL,
    cogs DECIMAL(10,2) NOT NULL,
    gross_margin_pct FLOAT(11,9),
    gross_income DECIMAL(12, 4),
    rating FLOAT(2, 1)
);

-- Cross checking once imported the data from .csv file procured from Kaggle
SELECT * FROM sales LIMIT 10;

-- Data cleaning
SELECT
	*
FROM sales;

----------- FEATURED ENGINEERING-----------
-- Add the time_of_day column
SELECT
	time,
	(CASE
		WHEN `time` BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
        WHEN `time` BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
        ELSE "Evening"
    END) AS time_of_day
FROM sales;


ALTER TABLE sales ADD COLUMN time_of_day VARCHAR(20);

-- For this to work turn off safe mode for update
-- Edit > Preferences > SQL Edito > scroll down and toggle safe mode
-- Reconnect to MySQL: Query > Reconnect to server
UPDATE sales
SET time_of_day = (
	CASE
		WHEN `time` BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
        WHEN `time` BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
        ELSE "Evening"
    END
);


-- Add day_name column
SELECT
	date,
	DAYNAME(date)
FROM sales;

ALTER TABLE sales ADD COLUMN day_name VARCHAR(10);

UPDATE sales
SET day_name = DAYNAME(date);


-- Add month_name column
SELECT
	date,
	MONTHNAME(date)
FROM sales;

ALTER TABLE sales ADD COLUMN month_name VARCHAR(10);

UPDATE sales
SET month_name = MONTHNAME(date);

-- --------------------------------------------------------------------
-- ---------------------------- Generic ------------------------------
-- --------------------------------------------------------------------
-- How many unique cities does the data have?
SELECT 
	DISTINCT city 
FROM sales;

-- In which city is each branch?
SELECT 
	DISTINCT city,
    branch
FROM sales;


-- --------------------------------------------------------------------
-- ---------------------------- Product -------------------------------
-- --------------------------------------------------------------------

-- How many unique product lines does the data have?
SELECT 
	DISTINCT product_line
FROM sales;

-- What is the most selling product line?
SELECT 
	SUM(quantity) AS qty,
    product_line
FROM sales
	GROUP BY product_line
	ORDER BY qty DESC;

-- What is the total revenue by month
SELECT 
	DISTINCT month_name 
FROM sales;

-- After checking the month_name coloumn thoroughly, we could go with the query --
SELECT 
	SUM(total) AS total_amt,
    month_name AS month
FROM sales
	GROUP BY month
    ORDER BY total_amt;

-- What month had the largest COGS?
SELECT
	DISTINCT month_name,
    COGS
FROM sales
	ORDER BY COGS DESC LIMIT 5;
    
-- What product line had the largest revenue?
SELECT 
	SUM(total) as total_revenue,
    product_line
FROM sales
	GROUP BY product_line
    ORDER BY total_revenue DESC;

-- What is the city with the largest revenue?
SELECT 
	DISTINCT CITY
FROM sales;

SELECT 
    city, SUM(total) AS total_revenue
FROM
    sales
GROUP BY city
ORDER BY total_revenue DESC;

-- What product line had the largest VAT?
SELECT 
    SUM(tax_pct) AS VAT, product_line
FROM
    sales
GROUP BY product_line
ORDER BY VAT DESC;

-- Fetch each product line and add a column to those product 
-- line showing "Good", "Bad". Good if its greater than average sales

SELECT 
    AVG(gross_income)
FROM
    sales;

SELECT 
    product_line,
    CASE
        WHEN AVG(gross_income) > 15.357 THEN 'GOOD'
        ELSE 'BAD'
    END AS REMARK
FROM
    sales
GROUP BY product_line;

-- Which branch sold more products than average product sold?
SELECT 
    AVG(quantity)
FROM
    sales;
-- 5.4995

SELECT 
    SUM(quantity) AS total_qty, branch
FROM
    sales
GROUP BY branch
HAVING total_qty > AVG(quantity);

-- What is the most common product line by gender
Select gender,
product_line
from sales
group by product_line
having avg(gender);

SELECT
	gender,
    product_line,
    COUNT(gender) AS total_cnt
FROM sales
GROUP BY gender, product_line
ORDER BY total_cnt DESC;

-- Create a stored procedure to show all transactions with top 10 revenue
DELIMITER $$
CREATE PROCEDURE top10_revenue()
BEGIN
	SELECT * 
    FROM sales 
    ORDER BY total DESC 
    LIMIT 10;
END $$
DELIMITER ;

-- What is the average rating of each product line
SELECT 
    product_line, ROUND(AVG(rating), 2) AS avg_rating
FROM
    sales
GROUP BY product_line
ORDER BY avg_rating DESC;

-- --------------------------------------------------------------------
-- --------------------------------------------------------------------

-- --------------------------------------------------------------------
-- -------------------------- Customers -------------------------------
-- --------------------------------------------------------------------

-- How many unique customer types does the data have?
CALL top10_revenue;

SELECT 
    COUNT(DISTINCT (customer_type))
FROM
    sales;
    
-- How many unique payment methods does the data have?
SELECT
	DISTINCT payment
FROM sales;


-- What is the most common customer type?
SELECT
	customer_type,
	count(*) as count
FROM sales
GROUP BY customer_type
ORDER BY count DESC;

-- Which customer type buys the most?
SELECT 
    customer_type, SUM(quantity) AS qty
FROM
    sales
GROUP BY customer_type
ORDER BY qty DESC;

-- What is the gender of most of the customers?
SELECT 
    gender, COUNT(gender)
FROM
    sales
GROUP BY gender;

-- What is the gender distribution per branch?
SELECT
	branch,
	gender,
	COUNT(*) as gender_cnt
FROM sales
WHERE branch = "C"
GROUP BY gender
ORDER BY gender_cnt DESC;


-- Which day of the week has the best average ratings per branch?
SELECT 
	day_name,
	COUNT(day_name) total_sales
FROM sales
WHERE branch = "C"
GROUP BY day_name
ORDER BY total_sales DESC;


-- --------------------------------------------------------------------
-- --------------------------------------------------------------------

-- --------------------------------------------------------------------
-- ---------------------------- Sales ---------------------------------
-- --------------------------------------------------------------------

-- Number of sales made in each time of the day per weekday 
SELECT
	time_of_day,
	COUNT(*) AS total_sales
FROM sales
WHERE day_name = "Sunday"
GROUP BY time_of_day 
ORDER BY total_sales DESC;
-- Evenings experience most sales, the stores are 
-- filled during the evening hours

-- Which of the customer types brings the most revenue?
SELECT
	customer_type,
	SUM(total) AS total_revenue
FROM sales
GROUP BY customer_type
ORDER BY total_revenue;

-- Which city has the largest tax/VAT percent?
SELECT
	city,
    ROUND(AVG(tax_pct), 2) AS avg_tax_pct
FROM sales
GROUP BY city 
ORDER BY avg_tax_pct DESC;

-- Which customer type pays the most in VAT?
SELECT
	customer_type,
	AVG(tax_pct) AS total_tax
FROM sales
GROUP BY customer_type
ORDER BY total_tax;

-- --------------------------------------------------------------------
-- --------------------------------------------------------------------
